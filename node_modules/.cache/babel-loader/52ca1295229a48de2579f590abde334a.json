{"ast":null,"code":"var _jsxFileName = \"/Users/ajayvarmabhupathiraju/Documents/main_project/a_workspace/src/Client/View/AfterLoginPages/ChitChat.jsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport styled from \"styled-components\";\nimport InNavbar from \"../../Model/NavBar/InNav\";\nimport comingsoon from \"../../../library/coming_soon.png\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction ChitChat() {\n  _s();\n\n  const [users, setUsers] = useState([]);\n  const [chat, setChat] = useState(\"\");\n  const [text, setText] = useState(\"\");\n  const [img, setImg] = useState(\"\");\n  const [msgs, setMsgs] = useState([]);\n  const user1 = auth.currentUser.uid;\n  useEffect(() => {\n    const usersRef = collection(db, \"users\"); // create query object\n\n    const q = query(usersRef, where(\"uid\", \"not-in\", [user1])); // execute query\n\n    const unsub = onSnapshot(q, querySnapshot => {\n      let users = [];\n      querySnapshot.forEach(doc => {\n        users.push(doc.data());\n      });\n      setUsers(users);\n    });\n    return () => unsub();\n  }, []);\n\n  const selectUser = async user => {\n    setChat(user);\n    const user2 = user.uid;\n    const id = user1 > user2 ? `${user1 + user2}` : `${user2 + user1}`;\n    const msgsRef = collection(db, \"messages\", id, \"chat\");\n    const q = query(msgsRef, orderBy(\"createdAt\", \"asc\"));\n    onSnapshot(q, querySnapshot => {\n      let msgs = [];\n      querySnapshot.forEach(doc => {\n        msgs.push(doc.data());\n      });\n      setMsgs(msgs);\n    }); // get last message b/w logged in user and selected user\n\n    const docSnap = await getDoc(doc(db, \"lastMsg\", id)); // if last message exists and message is from selected user\n\n    if (docSnap.data() && docSnap.data().from !== user1) {\n      // update last message doc, set unread to false\n      await updateDoc(doc(db, \"lastMsg\", id), {\n        unread: false\n      });\n    }\n  };\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n    const user2 = chat.uid;\n    const id = user1 > user2 ? `${user1 + user2}` : `${user2 + user1}`;\n    let url;\n\n    if (img) {\n      const imgRef = ref(storage, `images/${new Date().getTime()} - ${img.name}`);\n      const snap = await uploadBytes(imgRef, img);\n      const dlUrl = await getDownloadURL(ref(storage, snap.ref.fullPath));\n      url = dlUrl;\n    }\n\n    await addDoc(collection(db, \"messages\", id, \"chat\"), {\n      text,\n      from: user1,\n      to: user2,\n      createdAt: Timestamp.fromDate(new Date()),\n      media: url || \"\"\n    });\n    await setDoc(doc(db, \"lastMsg\", id), {\n      text,\n      from: user1,\n      to: user2,\n      createdAt: Timestamp.fromDate(new Date()),\n      media: url || \"\",\n      unread: true\n    });\n    setText(\"\");\n    setImg(\"\");\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(InNavbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"home_container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"users_container\",\n        children: users.map(user => /*#__PURE__*/_jsxDEV(User, {\n          user: user,\n          selectUser: selectUser,\n          user1: user1,\n          chat: chat\n        }, user.uid, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"messages_container\",\n        children: chat ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"messages_user\",\n            children: /*#__PURE__*/_jsxDEV(\"h3\", {\n              children: chat.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 113,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"messages\",\n            children: msgs.length ? msgs.map((msg, i) => /*#__PURE__*/_jsxDEV(Message, {\n              msg: msg,\n              user1: user1\n            }, i, false, {\n              fileName: _jsxFileName,\n              lineNumber: 118,\n              columnNumber: 23\n            }, this)) : null\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(MessageForm, {\n            handleSubmit: handleSubmit,\n            text: text,\n            setText: setText,\n            setImg: setImg\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true) : /*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"no_conv\",\n          children: \"Select a user to start conversation\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(ChitChat, \"EI6vydb5qYesP2uRUERqzpssspU=\");\n\n_c = ChitChat;\nexport default ChitChat;\nconst Container = styled.div`\n  align-items: center;\n  background-repeat: no-repeat;\n  padding: 50px 50px;\n  background-color: greenyellow;\n`;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChitChat\");","map":{"version":3,"sources":["/Users/ajayvarmabhupathiraju/Documents/main_project/a_workspace/src/Client/View/AfterLoginPages/ChitChat.jsx"],"names":["React","styled","InNavbar","comingsoon","ChitChat","users","setUsers","useState","chat","setChat","text","setText","img","setImg","msgs","setMsgs","user1","auth","currentUser","uid","useEffect","usersRef","collection","db","q","query","where","unsub","onSnapshot","querySnapshot","forEach","doc","push","data","selectUser","user","user2","id","msgsRef","orderBy","docSnap","getDoc","from","updateDoc","unread","handleSubmit","e","preventDefault","url","imgRef","ref","storage","Date","getTime","name","snap","uploadBytes","dlUrl","getDownloadURL","fullPath","addDoc","to","createdAt","Timestamp","fromDate","media","setDoc","map","length","msg","i","Container","div"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,OAAOC,QAAP,MAAqB,0BAArB;AACA,OAAOC,UAAP,MAAuB,kCAAvB;;;;AAEA,SAASC,QAAT,GAAoB;AAAA;;AAClB,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBC,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBF,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACG,IAAD,EAAOC,OAAP,IAAkBJ,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACK,GAAD,EAAMC,MAAN,IAAgBN,QAAQ,CAAC,EAAD,CAA9B;AACA,QAAM,CAACO,IAAD,EAAOC,OAAP,IAAkBR,QAAQ,CAAC,EAAD,CAAhC;AAEA,QAAMS,KAAK,GAAGC,IAAI,CAACC,WAAL,CAAiBC,GAA/B;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMC,QAAQ,GAAGC,UAAU,CAACC,EAAD,EAAK,OAAL,CAA3B,CADc,CAEd;;AACA,UAAMC,CAAC,GAAGC,KAAK,CAACJ,QAAD,EAAWK,KAAK,CAAC,KAAD,EAAQ,QAAR,EAAkB,CAACV,KAAD,CAAlB,CAAhB,CAAf,CAHc,CAId;;AACA,UAAMW,KAAK,GAAGC,UAAU,CAACJ,CAAD,EAAKK,aAAD,IAAmB;AAC7C,UAAIxB,KAAK,GAAG,EAAZ;AACAwB,MAAAA,aAAa,CAACC,OAAd,CAAuBC,GAAD,IAAS;AAC7B1B,QAAAA,KAAK,CAAC2B,IAAN,CAAWD,GAAG,CAACE,IAAJ,EAAX;AACD,OAFD;AAGA3B,MAAAA,QAAQ,CAACD,KAAD,CAAR;AACD,KANuB,CAAxB;AAOA,WAAO,MAAMsB,KAAK,EAAlB;AACD,GAbQ,EAaN,EAbM,CAAT;;AAeA,QAAMO,UAAU,GAAG,MAAOC,IAAP,IAAgB;AACjC1B,IAAAA,OAAO,CAAC0B,IAAD,CAAP;AAEA,UAAMC,KAAK,GAAGD,IAAI,CAAChB,GAAnB;AACA,UAAMkB,EAAE,GAAGrB,KAAK,GAAGoB,KAAR,GAAiB,GAAEpB,KAAK,GAAGoB,KAAM,EAAjC,GAAsC,GAAEA,KAAK,GAAGpB,KAAM,EAAjE;AAEA,UAAMsB,OAAO,GAAGhB,UAAU,CAACC,EAAD,EAAK,UAAL,EAAiBc,EAAjB,EAAqB,MAArB,CAA1B;AACA,UAAMb,CAAC,GAAGC,KAAK,CAACa,OAAD,EAAUC,OAAO,CAAC,WAAD,EAAc,KAAd,CAAjB,CAAf;AAEAX,IAAAA,UAAU,CAACJ,CAAD,EAAKK,aAAD,IAAmB;AAC/B,UAAIf,IAAI,GAAG,EAAX;AACAe,MAAAA,aAAa,CAACC,OAAd,CAAuBC,GAAD,IAAS;AAC7BjB,QAAAA,IAAI,CAACkB,IAAL,CAAUD,GAAG,CAACE,IAAJ,EAAV;AACD,OAFD;AAGAlB,MAAAA,OAAO,CAACD,IAAD,CAAP;AACD,KANS,CAAV,CATiC,CAiBjC;;AACA,UAAM0B,OAAO,GAAG,MAAMC,MAAM,CAACV,GAAG,CAACR,EAAD,EAAK,SAAL,EAAgBc,EAAhB,CAAJ,CAA5B,CAlBiC,CAmBjC;;AACA,QAAIG,OAAO,CAACP,IAAR,MAAkBO,OAAO,CAACP,IAAR,GAAeS,IAAf,KAAwB1B,KAA9C,EAAqD;AACnD;AACA,YAAM2B,SAAS,CAACZ,GAAG,CAACR,EAAD,EAAK,SAAL,EAAgBc,EAAhB,CAAJ,EAAyB;AAAEO,QAAAA,MAAM,EAAE;AAAV,OAAzB,CAAf;AACD;AACF,GAxBD;;AA0BA,QAAMC,YAAY,GAAG,MAAOC,CAAP,IAAa;AAChCA,IAAAA,CAAC,CAACC,cAAF;AAEA,UAAMX,KAAK,GAAG5B,IAAI,CAACW,GAAnB;AAEA,UAAMkB,EAAE,GAAGrB,KAAK,GAAGoB,KAAR,GAAiB,GAAEpB,KAAK,GAAGoB,KAAM,EAAjC,GAAsC,GAAEA,KAAK,GAAGpB,KAAM,EAAjE;AAEA,QAAIgC,GAAJ;;AACA,QAAIpC,GAAJ,EAAS;AACP,YAAMqC,MAAM,GAAGC,GAAG,CAChBC,OADgB,EAEf,UAAS,IAAIC,IAAJ,GAAWC,OAAX,EAAqB,MAAKzC,GAAG,CAAC0C,IAAK,EAF7B,CAAlB;AAIA,YAAMC,IAAI,GAAG,MAAMC,WAAW,CAACP,MAAD,EAASrC,GAAT,CAA9B;AACA,YAAM6C,KAAK,GAAG,MAAMC,cAAc,CAACR,GAAG,CAACC,OAAD,EAAUI,IAAI,CAACL,GAAL,CAASS,QAAnB,CAAJ,CAAlC;AACAX,MAAAA,GAAG,GAAGS,KAAN;AACD;;AAED,UAAMG,MAAM,CAACtC,UAAU,CAACC,EAAD,EAAK,UAAL,EAAiBc,EAAjB,EAAqB,MAArB,CAAX,EAAyC;AACnD3B,MAAAA,IADmD;AAEnDgC,MAAAA,IAAI,EAAE1B,KAF6C;AAGnD6C,MAAAA,EAAE,EAAEzB,KAH+C;AAInD0B,MAAAA,SAAS,EAAEC,SAAS,CAACC,QAAV,CAAmB,IAAIZ,IAAJ,EAAnB,CAJwC;AAKnDa,MAAAA,KAAK,EAAEjB,GAAG,IAAI;AALqC,KAAzC,CAAZ;AAQA,UAAMkB,MAAM,CAACnC,GAAG,CAACR,EAAD,EAAK,SAAL,EAAgBc,EAAhB,CAAJ,EAAyB;AACnC3B,MAAAA,IADmC;AAEnCgC,MAAAA,IAAI,EAAE1B,KAF6B;AAGnC6C,MAAAA,EAAE,EAAEzB,KAH+B;AAInC0B,MAAAA,SAAS,EAAEC,SAAS,CAACC,QAAV,CAAmB,IAAIZ,IAAJ,EAAnB,CAJwB;AAKnCa,MAAAA,KAAK,EAAEjB,GAAG,IAAI,EALqB;AAMnCJ,MAAAA,MAAM,EAAE;AAN2B,KAAzB,CAAZ;AASAjC,IAAAA,OAAO,CAAC,EAAD,CAAP;AACAE,IAAAA,MAAM,CAAC,EAAD,CAAN;AACD,GArCD;;AAsCA,sBACE;AAAA,4BACE,QAAC,QAAD;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAK,MAAA,SAAS,EAAC,gBAAf;AAAA,8BACE;AAAK,QAAA,SAAS,EAAC,iBAAf;AAAA,kBACGR,KAAK,CAAC8D,GAAN,CAAWhC,IAAD,iBACT,QAAC,IAAD;AAEE,UAAA,IAAI,EAAEA,IAFR;AAGE,UAAA,UAAU,EAAED,UAHd;AAIE,UAAA,KAAK,EAAElB,KAJT;AAKE,UAAA,IAAI,EAAER;AALR,WACO2B,IAAI,CAAChB,GADZ;AAAA;AAAA;AAAA;AAAA,gBADD;AADH;AAAA;AAAA;AAAA;AAAA,cADF,eAYE;AAAK,QAAA,SAAS,EAAC,oBAAf;AAAA,kBACGX,IAAI,gBACH;AAAA,kCACE;AAAK,YAAA,SAAS,EAAC,eAAf;AAAA,mCACE;AAAA,wBAAKA,IAAI,CAAC8C;AAAV;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,kBADF,eAIE;AAAK,YAAA,SAAS,EAAC,UAAf;AAAA,sBACGxC,IAAI,CAACsD,MAAL,GACGtD,IAAI,CAACqD,GAAL,CAAS,CAACE,GAAD,EAAMC,CAAN,kBACP,QAAC,OAAD;AAAiB,cAAA,GAAG,EAAED,GAAtB;AAA2B,cAAA,KAAK,EAAErD;AAAlC,eAAcsD,CAAd;AAAA;AAAA;AAAA;AAAA,oBADF,CADH,GAIG;AALN;AAAA;AAAA;AAAA;AAAA,kBAJF,eAWE,QAAC,WAAD;AACE,YAAA,YAAY,EAAEzB,YADhB;AAEE,YAAA,IAAI,EAAEnC,IAFR;AAGE,YAAA,OAAO,EAAEC,OAHX;AAIE,YAAA,MAAM,EAAEE;AAJV;AAAA;AAAA;AAAA;AAAA,kBAXF;AAAA,wBADG,gBAoBH;AAAI,UAAA,SAAS,EAAC,SAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AArBJ;AAAA;AAAA;AAAA;AAAA,cAZF;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA,kBADF;AA0CD;;GAlIQT,Q;;KAAAA,Q;AAoIT,eAAeA,QAAf;AAEA,MAAMmE,SAAS,GAAGtE,MAAM,CAACuE,GAAI;AAC7B;AACA;AACA;AACA;AACA,CALA","sourcesContent":["import React from \"react\";\nimport styled from \"styled-components\";\nimport InNavbar from \"../../Model/NavBar/InNav\";\nimport comingsoon from \"../../../library/coming_soon.png\";\n\nfunction ChitChat() {\n  const [users, setUsers] = useState([]);\n  const [chat, setChat] = useState(\"\");\n  const [text, setText] = useState(\"\");\n  const [img, setImg] = useState(\"\");\n  const [msgs, setMsgs] = useState([]);\n\n  const user1 = auth.currentUser.uid;\n\n  useEffect(() => {\n    const usersRef = collection(db, \"users\");\n    // create query object\n    const q = query(usersRef, where(\"uid\", \"not-in\", [user1]));\n    // execute query\n    const unsub = onSnapshot(q, (querySnapshot) => {\n      let users = [];\n      querySnapshot.forEach((doc) => {\n        users.push(doc.data());\n      });\n      setUsers(users);\n    });\n    return () => unsub();\n  }, []);\n\n  const selectUser = async (user) => {\n    setChat(user);\n\n    const user2 = user.uid;\n    const id = user1 > user2 ? `${user1 + user2}` : `${user2 + user1}`;\n\n    const msgsRef = collection(db, \"messages\", id, \"chat\");\n    const q = query(msgsRef, orderBy(\"createdAt\", \"asc\"));\n\n    onSnapshot(q, (querySnapshot) => {\n      let msgs = [];\n      querySnapshot.forEach((doc) => {\n        msgs.push(doc.data());\n      });\n      setMsgs(msgs);\n    });\n\n    // get last message b/w logged in user and selected user\n    const docSnap = await getDoc(doc(db, \"lastMsg\", id));\n    // if last message exists and message is from selected user\n    if (docSnap.data() && docSnap.data().from !== user1) {\n      // update last message doc, set unread to false\n      await updateDoc(doc(db, \"lastMsg\", id), { unread: false });\n    }\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n\n    const user2 = chat.uid;\n\n    const id = user1 > user2 ? `${user1 + user2}` : `${user2 + user1}`;\n\n    let url;\n    if (img) {\n      const imgRef = ref(\n        storage,\n        `images/${new Date().getTime()} - ${img.name}`\n      );\n      const snap = await uploadBytes(imgRef, img);\n      const dlUrl = await getDownloadURL(ref(storage, snap.ref.fullPath));\n      url = dlUrl;\n    }\n\n    await addDoc(collection(db, \"messages\", id, \"chat\"), {\n      text,\n      from: user1,\n      to: user2,\n      createdAt: Timestamp.fromDate(new Date()),\n      media: url || \"\",\n    });\n\n    await setDoc(doc(db, \"lastMsg\", id), {\n      text,\n      from: user1,\n      to: user2,\n      createdAt: Timestamp.fromDate(new Date()),\n      media: url || \"\",\n      unread: true,\n    });\n\n    setText(\"\");\n    setImg(\"\");\n  };\n  return (\n    <>\n      <InNavbar />\n      <div className=\"home_container\">\n        <div className=\"users_container\">\n          {users.map((user) => (\n            <User\n              key={user.uid}\n              user={user}\n              selectUser={selectUser}\n              user1={user1}\n              chat={chat}\n            />\n          ))}\n        </div>\n        <div className=\"messages_container\">\n          {chat ? (\n            <>\n              <div className=\"messages_user\">\n                <h3>{chat.name}</h3>\n              </div>\n              <div className=\"messages\">\n                {msgs.length\n                  ? msgs.map((msg, i) => (\n                      <Message key={i} msg={msg} user1={user1} />\n                    ))\n                  : null}\n              </div>\n              <MessageForm\n                handleSubmit={handleSubmit}\n                text={text}\n                setText={setText}\n                setImg={setImg}\n              />\n            </>\n          ) : (\n            <h3 className=\"no_conv\">Select a user to start conversation</h3>\n          )}\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default ChitChat;\n\nconst Container = styled.div`\n  align-items: center;\n  background-repeat: no-repeat;\n  padding: 50px 50px;\n  background-color: greenyellow;\n`;\n"]},"metadata":{},"sourceType":"module"}